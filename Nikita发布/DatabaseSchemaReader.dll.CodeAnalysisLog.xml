<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="D:\GitHub\学习使用\Nikita发布\DatabaseSchemaReader.dll">
   <Modules>
    <Module Name="databaseschemareader.dll">
     <Namespaces>
      <Namespace Name="DatabaseSchemaReader.CodeGen">
       <Types>
        <Type Name="NameFixer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToCamelCase(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-05-15 09:29:22Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\GitHub\学习使用\Nikita-2013\DatabaseSchemaReader\CodeGen" File="NameFixer.cs" Line="51">'NameFixer.ToCamelCase(string)' 调入具有 LinkDemand 的 'CodeDomProvider.IsValidIdentifier(string)'。通过此调用，'CodeDomProvider.IsValidIdentifier(string)' 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: &#xD;&#xA;   -&gt;'NameFixer.ToCamelCase(string)'&#xD;&#xA;   -&gt;'NameFixer.ToCamelCase(string)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>不要使用链接请求间接公开方法</Name>
   <Description>不要使用不执行安全性检查的方法来包装受 LinkDemand 保护的方法。LinkDemand 检查直接调用方的权限而不是调用堆栈中所有调用方的权限。在这种情况下，将检查包装器方法的权限。如果包装器方法本身不检查调用堆栈中位置较高的调用方的权限，则尽管恶意代码没有足够的权限，但它仍可能能够执行被包装的函数。</Description>
   <Resolution Name="Default">{0} 调入具有 LinkDemand 的 {1}。通过此调用，{1} 被间接公开给用户代码。检查以下可能公开避开安全保护的方法的调用堆栈: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">类别</String>
  <String Key="Certainty">确定性</String>
  <String Key="CollapseAll">全部折叠</String>
  <String Key="CheckId">检查 ID</String>
  <String Key="Error">错误</String>
  <String Key="Errors">错误</String>
  <String Key="ExpandAll">全部展开</String>
  <String Key="Help">帮助</String>
  <String Key="Line">行</String>
  <String Key="Messages">消息</String>
  <String Key="LocationNotStoredInPdb">[位置未存储在 Pdb 中]</String>
  <String Key="Project">项目</String>
  <String Key="Resolution">解析</String>
  <String Key="Rule">规则</String>
  <String Key="RuleFile">规则文件</String>
  <String Key="RuleDescription">规则说明</String>
  <String Key="Source">源</String>
  <String Key="Status">状态</String>
  <String Key="Target">目标</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">代码分析报告</String>
 </Localized>
 <Exceptions>
  <Exception Keyword="CA0001" Kind="Engine">
   <Type>Phx.FatalError</Type>
   <ExceptionMessage>引发类型为“Phx.FatalError”的异常。</ExceptionMessage>
   <StackTrace>   在 Phx.FatalError.Dispatch()
   在 Phx.Logging.Diagnostics.DiagnosticMessage.LogMessage(Severity severity, DiagnosticInfo diagnosticInfo, SourceContext sourceContext, String descriptionString)
   在 Phx.PE.PEUtilities.UserError(String infoMessage)
   在 Phx.Pdb.ReaderImplementation.Open(Boolean loadTypeOnly)
   在 Phx.PEModuleUnit.LoadPdb()
   在 Phx.PE.ReaderPhase.CheckSymbolicInformation()
   在 Phx.PEModuleUnit.LoadGlobalSymbols()
   在 Phx.PEModuleUnit.LoadEncodedIRUnitList()
   在 Phx.PEModuleUnit.GetEnumerableContributionUnit(ContributionUnitEnumerationKind contributionUnitEnumerationKind)
   在 Phx.PEModuleUnit.GetEnumerableContributionUnit()
   在 Microsoft.FxCop.Engines.Phoenix.PreScanPass.GetFunctionUnits(PEModuleUnit peModuleUnit)
   在 Microsoft.FxCop.Engines.Phoenix.PreScanPass.Execute(ModuleUnit moduleUnit)
   在 Phx.Passes.Pass.DoPass(ModuleUnit moduleUnit)
   在 Phx.Passes.PassList.DoPassList(ModuleUnit moduleUnit)
   在 Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.Host.ExecutePasses(PEModuleUnit peModuleUnit)
   在 Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.AnalyzeInternal()
   在 Microsoft.FxCop.Engines.Phoenix.PhoenixAnalysisEngine.Analyze()
   在 Microsoft.FxCop.Common.EngineManager.Analyze(Project project, Boolean verboseOutput)</StackTrace>
  </Exception>
 </Exceptions>
</FxCopReport>
