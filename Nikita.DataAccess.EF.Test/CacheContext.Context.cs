//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nikita.DataAccess.EF.Test
{
    using EFSecondLevelCache;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    
    public partial class studentEntities : DbContext
    {
        public studentEntities()
            : base("name=studentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public override int SaveChanges()
        {
            return SaveAllChanges(invalidateCacheDependencies: true);
        }

        public int SaveAllChanges(bool invalidateCacheDependencies = true)
        {
            var changedEntityNames = getChangedEntityNames();
            var result = base.SaveChanges();
            if (invalidateCacheDependencies)
            {
                new EFCacheServiceProvider().InvalidateCacheDependencies(changedEntityNames);
            }
            return result;
        }

        private string[] getChangedEntityNames()
        {
            List<string> names = new List<string>();
            foreach (var x in this.ChangeTracker.Entries())
            {
                if ( x.State == EntityState.Added ||
                         x.State == EntityState.Modified ||
                          x.State == EntityState.Deleted)
                {
                    string xname = ObjectContext.GetObjectType(x.Entity.GetType()).FullName;
                    if (!names.Contains(xname))
                    {
                        names.Add(xname);
                    }
                }
            }
            return names.ToArray();
            //return this.ChangeTracker.Entries()
            //    .Where(x => x.State == EntityState.Added ||
            //                x.State == EntityState.Modified ||
            //                x.State == EntityState.Deleted)
            //    .Select(x => ObjectContext.GetObjectType(x.Entity.GetType()).FullName)
            //    .Distinct()
            //    .ToArray();
        }
    
        public virtual DbSet<Class> Class { get; set; }
        public virtual DbSet<ClassInfo> ClassInfo { get; set; }
        public virtual DbSet<cools> cools { get; set; }
        public virtual DbSet<news> news { get; set; }
        public virtual DbSet<stu> stu { get; set; }
        public virtual DbSet<stus> stus { get; set; }
        public virtual DbSet<stuu> stuu { get; set; }
        public virtual DbSet<tabdb> tabdb { get; set; }
        public virtual DbSet<test> test { get; set; }
        public virtual DbSet<StudentInfo> StudentInfo { get; set; }
    }
}
